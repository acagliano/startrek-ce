; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_Ship:
	DL	0
	DL	0
	DL	0
	DW	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DB	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DS	21
_select:
	DW	0
	DB	0
	DW	0
	DB	0
;    1	//--------------------------------------
;    2	// Program Name: Star Trek Multplayer
;    3	// Author: Anthony Cagliano
;    4	// License:
;    5	// Description:
;    6	//--------------------------------------
;    7	
;    8	/* Keep these headers */
;    9	#include <stdbool.h>
;   10	#include <stddef.h>
;   11	#include <stdint.h>
;   12	#include <tice.h>
;   13	#include <intce.h>
;   14	
;   15	/* Standard headers - it's recommended to leave them included */
;   16	#include <math.h>
;   17	#include <stdio.h>
;   18	#include <stdlib.h>
;   19	#include <string.h>
;   20	
;   21	
;   22	/* Other available headers */
;   23	// stdarg.h, setjmp.h, assert.h, ctype.h, float.h, iso646.h, limits.h, errno.h, debug.h
;   24	#include <fileioc.h>
;   25	#include <graphx.h>
;   26	#include <compression.h>
;   27	#include <keypadc.h>
;   28	
;   29	// Game Data Types (Structure Definitions)
;   30	
;   31	#include "classes/ships.h"
;   32	#include "classes/coords.h"
;   33	#include "classes/tech.h"
;   34	#include "classes/screens.h"
;   35	#include "statscreens.h"
;   36	#include "gfx/trekgui.h"
;   37	/* Put your function prototypes here */
;   38	#define setbits(bits, mask) (bits|mask)
;   39	#define resbits(bits, mask) (bits^mask)
;   40	
;   41	ship_t Ship = {0};
;   42	selected_t select = {0, 0};
	SEGMENT CODE
;   43	
;   44	void main(void) {
_main:
	LD	HL,-76
	CALL	__frameset
;   45	    uint16_t screen = 0;
	LD	(IX+-2),0
	LD	(IX+-1),0
;   46	    bool loopgame = true;
	LD	(IX+-20),1
;   47	    unsigned int i;
;   48	    ti_var_t appvar;
;   49	    gfx_rletsprite_t* gfx_sprites = malloc(trekgui_uncompressed_size);
	LD	BC,36609
	PUSH	BC
	CALL	_malloc
	POP	BC
	LD	(IX+-24),HL
;   50	    gfx_Begin();
	CALL	_gfx_Begin
;   51	    srandom(rtc_Time());
	LD	A,(15925319)
	LD	C,A
	LD	B,0
	PUSH	BC
	LD	BC,(15925316)
	PUSH	BC
	CALL	_srandom
	POP	BC
	POP	BC
;   52	    ti_CloseAll();
	CALL	_ti_CloseAll
;   53	    if(!gfx_sprites) return;
	LD	HL,(IX+-24)
	CALL	__icmpzero
	JR	Z,L_91
;   54	    if(!(appvar = ti_Open("trekgui", "r"))) return;
	LD	BC,L__1
	PUSH	BC
	LD	BC,L__2
	PUSH	BC
	CALL	_ti_Open
	POP	BC
	POP	BC
	LD	(IX+-21),A
	OR	A,A
	JR	Z,L_91
;   55	    zx7_Decompress(gfx_sprites, ti_GetDataPtr(appvar));
	LD	C,(IX+-21)
	LD	B,0
	PUSH	BC
	CALL	_ti_GetDataPtr
	POP	BC
	PUSH	HL
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_zx7_Decompress
	POP	BC
	POP	BC
;   56	    trekgui_init(gfx_sprites);
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_trekgui_init
	POP	BC
;   57	    gfx_InitModuleIcons();
	CALL	_gfx_InitModuleIcons
;   58	    ti_CloseAll();
	CALL	_ti_CloseAll
;   59	    int_Disable();
di
;   60	    gfx_SetDefaultPalette(gfx_8bpp);
	LD	BC,39
	PUSH	BC
	CALL	_gfx_SetDefaultPalette
	POP	BC
;   61	    gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   62	    gfx_SetTextTransparentColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextTransparentColor
	POP	BC
;   63	    gfx_SetTextBGColor(1);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetTextBGColor
	POP	BC
;   64	    module_SetHealthMax(&Ship.hull.health, 1000);
	LD	BC,1000
	PUSH	BC
	LD	BC,_Ship+684
	PUSH	BC
	CALL	_module_SetHealthMax
	POP	BC
	POP	BC
;   65	    for(i = 0; i < SYS_MAX; i++){
	LD	BC,0
	LD	(IX+-5),BC
	JR	L_7
L_5:
;   66	       // Ship.system[i].techclass = MC_SYSTEM;
;   67	        Ship.system[i].assigned = true;
	LD	BC,_Ship+15
	LD	(IX+-19),BC
	LD	(IX+-64),BC
	LD	HL,(IX+-5)
	LD	A,54
	CALL	__imul_b
	LD	BC,HL
	LD	DE,BC
	LD	HL,(IX+-19)
	ADD	HL,DE
	LD	(IX+-61),HL
	LD	DE,(IX+-61)
	LD	(IX+-58),DE
	LD	IY,(IX+-61)
	LD	(IY+1),1
;   68	        Ship.system[i].online = true;
	LD	(IY+4),1
;   69	        Ship.system[i].techtype = i;
	LD	HL,(IX+-19)
	LD	DE,BC
	ADD	HL,DE
	LD	IY,HL
	LD	A,(IX+-5)
	LD	(IY+3),A
;   70	        module_SetHealthMax(&Ship.system[i].health, 50);
	LD	DE,50
	PUSH	DE
	LD	HL,(IX+-19)
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+21
	CALL	_module_SetHealthMax
	POP	BC
	POP	BC
;   71	        module_SetPowerMax(&Ship.system[i].power);
	LD	HL,(IX+-5)
	LD	A,54
	CALL	__imul_b
	LD	BC,(IX+-19)
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+6
	CALL	_module_SetPowerMax
	POP	BC
	LD	BC,(IX+-5)
	INC	BC
	LD	(IX+-5),BC
;   72	    }
L_7:
	LD	BC,6
	LD	HL,(IX+-5)
	OR	A,A
	SBC	HL,BC
	JR	C,L_5
;   73	    for(i = 0; i < 2; i++){
	LD	BC,0
	LD	(IX+-5),BC
	JR	L_11
L_9:
;   74	      //  Ship.shield[i].techclass = MC_TACTICAL;
;   75	        Ship.tactical[i].unlocked = true;
	LD	BC,_Ship+339
	LD	(IX+-9),BC
	LD	(IX+-73),BC
	LD	HL,(IX+-5)
	LD	A,54
	CALL	__imul_b
	LD	BC,HL
	LD	DE,BC
	LD	HL,(IX+-9)
	ADD	HL,DE
	LD	(IX+-70),HL
	LD	DE,(IX+-70)
	LD	(IX+-67),DE
	LD	IY,(IX+-70)
	LD	A,1
	LD	(IY+0),A
;   76	        Ship.tactical[i].assigned = true;
	LD	(IY+1),A
;   77	        Ship.tactical[i].online = true;
	LD	HL,(IX+-9)
	LD	DE,BC
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+4),1
;   78	        Ship.tactical[i].techtype = SHIELD;
	LD	HL,(IX+-9)
	LD	DE,BC
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+3),6
;   79	        module_SetHealthMax(&Ship.tactical[i].health, 50);
	LD	DE,50
	PUSH	DE
	LD	HL,(IX+-9)
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+21
	CALL	_module_SetHealthMax
	POP	BC
	POP	BC
;   80	        module_SetPowerMax(&Ship.tactical[i].power);
	LD	BC,(IX+-9)
	LD	(IX+-55),BC
	LD	HL,(IX+-5)
	LD	A,54
	CALL	__imul_b
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+6
	CALL	_module_SetPowerMax
	POP	BC
;   81	        Ship.tactical[i].data.mod_shields.resistance = 10;
	LD	HL,(IX+-5)
	LD	DE,(IX+-9)
	LD	BC,10
	LD	A,54
	CALL	__imul_b
	ADD	HL,DE
	LD	IY,HL
	LD	(IY+27),BC
	LD	BC,(IX+-5)
	INC	BC
	LD	(IX+-5),BC
;   82	    }
L_11:
	LD	BC,2
	LD	HL,(IX+-5)
	OR	A,A
	SBC	HL,BC
	JR	C,L_9
;   83	    do {
L_87:
;   84	        unsigned char key = os_GetCSC();
	CALL	_os_GetCSC
	LD	(IX+-6),A
;   85	        Screen_RenderUI(screen, &Ship, &select);
	LD	BC,_select
	PUSH	BC
	LD	BC,_Ship
	PUSH	BC
	LD	BC,(IX+-2)
	CALL	__stoiu
	PUSH	HL
	CALL	_Screen_RenderUI
	POP	BC
	POP	BC
	POP	BC
;   86	        if(key == sk_Clear){
	LD	A,(IX+-6)
	CP	A,15
	JR	NZ,L_21
;   87	            if(screen > 0xff) screen = resbits(screen, SCRN_INFO);
	LD	BC,(IX+-2)
	LD.LIS	HL,255
	OR	A,A
	SBC.SIS	HL,BC
	JR	NC,L_14
	LD.LIS	BC,65280
	LD	HL,(IX+-2)
	CALL	__sxor
	LD	(IX+-2),L
	LD	(IX+-1),H
;   88	            else loopgame = false;
	JR	L_21
L_14:
	LD	(IX+-20),0
;   89	        }
L_21:
;   90	        if(key == sk_Yequ)
	LD	A,(IX+-6)
	CP	A,53
	JR	NZ,L_27
;   91	            screen = (screen == SCRN_SENS) ? SCRN_OFF : SCRN_SENS;
	LD.LIS	BC,1
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_18
	LD	BC,0
	LD	(IX+-49),BC
	JR	L_19
L_18:
	LD	BC,1
	LD	(IX+-49),BC
L_19:
	LD	HL,(IX+-49)
	LD	(IX+-2),L
	LD	(IX+-1),H
L_27:
;   92	        if(key == sk_Window)
	LD	A,(IX+-6)
	CP	A,52
	JR	NZ,L_33
;   93	            screen = (screen == SCRN_TACT) ? SCRN_OFF : SCRN_TACT;
	LD.LIS	BC,2
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_24
	LD	BC,0
	LD	(IX+-34),BC
	JR	L_25
L_24:
	LD	BC,2
	LD	(IX+-34),BC
L_25:
	LD	HL,(IX+-34)
	LD	(IX+-2),L
	LD	(IX+-1),H
L_33:
;   94	        if(key == sk_Zoom)
	LD	A,(IX+-6)
	CP	A,51
	JR	NZ,L_39
;   95	            screen = (screen == SCRN_MAINS) ? SCRN_OFF : SCRN_MAINS;
	LD.LIS	BC,3
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_30
	LD	BC,0
	LD	(IX+-40),BC
	JR	L_31
L_30:
	LD	BC,3
	LD	(IX+-40),BC
L_31:
	LD	HL,(IX+-40)
	LD	(IX+-2),L
	LD	(IX+-1),H
L_39:
;   96	        if(key == sk_Trace)
	LD	A,(IX+-6)
	CP	A,50
	JR	NZ,L_45
;   97	            screen = (screen == SCRN_TRANSPORT) ? SCRN_OFF : SCRN_TRANSPORT;
	LD.LIS	BC,4
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_36
	LD	BC,0
	LD	(IX+-43),BC
	JR	L_37
L_36:
	LD	BC,4
	LD	(IX+-43),BC
L_37:
	LD	HL,(IX+-43)
	LD	(IX+-2),L
	LD	(IX+-1),H
L_45:
;   98	        if(key == sk_Graph)
	LD	A,(IX+-6)
	CP	A,49
	JR	NZ,L_49
;   99	            screen = (screen == SCRN_CARGO) ? SCRN_OFF : SCRN_CARGO;
	LD.LIS	BC,5
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_42
	LD	BC,0
	LD	(IX+-46),BC
	JR	L_43
L_42:
	LD	BC,5
	LD	(IX+-46),BC
L_43:
	LD	HL,(IX+-46)
	LD	(IX+-2),L
	LD	(IX+-1),H
L_49:
;  100	        if(key == sk_Enter){
	LD	A,(IX+-6)
	CP	A,9
	JR	NZ,L_58
;  101	            if((screen == SCRN_MAINS) || (screen == SCRN_TACT))
	LD.LIS	BC,3
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	Z,L_47
	LD.LIS	BC,2
	LD	HL,(IX+-2)
	OR	A,A
	SBC.SIS	HL,BC
	JR	NZ,L_58
L_47:
;  102	                screen = setbits(screen, SCRN_INFO);
	LD.LIS	BC,65280
	LD	HL,(IX+-2)
	CALL	__sor
	LD	(IX+-2),L
	LD	(IX+-1),H
;  103	        }
L_58:
;  104	        if(key == sk_Square){
	LD	A,(IX+-6)
	CP	A,45
	JR	NZ,L_72
;  105	            char i;
;  106	            char modnum = randInt(0, SYS_MAX - 1);
	CALL	_random
	LD	BC,6
	CALL	__iremu
	LD	(IX+-25),L
;  107	            char randnum = randInt(5, 10);
	CALL	_random
	LD	BC,6
	CALL	__iremu
	LD	IY,HL
	LEA	HL,IY+5
	LD	(IX+-12),L
;  108	            for(i = 0; i < TACT_MAX; i++){
	LD	(IX+-13),0
	JR	L_55
L_53:
;  109	                module_t *shield = &Ship.tactical[i];
	LD	A,(IX+-13)
	SEXT	HL
	LD	L,(IX+-13)
	LD	A,54
	CALL	__imul_b
	LD	BC,_Ship+339
	ADD	HL,BC
	LD	(IX+-16),HL
;  110	                if((shield->techtype == SHIELD) && shield->online){
	LD	IY,(IX+-16)
	LD	A,(IY+3)
	CP	A,6
	JR	NZ,L_54
	LD	IY,(IX+-16)
	LD	A,(IY+4)
	OR	A,A
	JR	Z,L_54
;  111	                    int health = health_GetHealthPercent(&shield->health);
	LD	IY,(IX+-16)
	LEA	BC,IY+21
	LD	(IX+-76),BC
	PEA	IY+21
	CALL	_health_GetHealthPercent
	POP	BC
	LD	(IX+-52),HL
;  112	                    int drv = shield->data.mod_shields.resistance;
	LD	IY,(IX+-16)
	LD	BC,(IY+27)
	LD	(IX+-28),BC
;  113	                    drv = health * drv / 100;
	LD	HL,(IX+-52)
	CALL	__imuls
	LD	BC,100
	CALL	__idivs
	LD	(IX+-28),HL
;  114	                    health_DamageModule(&shield->health, -(randnum));
	LD	A,(IX+-12)
	SEXT	HL
	LD	L,(IX+-12)
	CALL	__ineg
	PUSH	HL
	PEA	IY+21
	CALL	_health_DamageModule
	POP	BC
	POP	BC
;  115	                    randnum -= drv;
	LD	B,(IX+-28)
	LD	A,(IX+-12)
	SUB	A,B
	LD	(IX+-12),A
;  116	                }
;  117	            }
L_54:
	INC	(IX+-13)
L_55:
	LD	A,(IX+-13)
	CP	A,6
	JP	M,L_53
;  118	            health_DamageModule(&Ship.hull.health, -(randnum));
	LD	A,(IX+-12)
	SEXT	HL
	LD	L,(IX+-12)
	CALL	__ineg
	PUSH	HL
	LD	BC,_Ship+684
	PUSH	BC
	CALL	_health_DamageModule
	POP	BC
	POP	BC
;  119	            health_DamageModule(&Ship.system[modnum].health, -(randnum));
	LD	A,(IX+-12)
	SEXT	HL
	LD	L,(IX+-12)
	CALL	__ineg
	PUSH	HL
	LD	A,(IX+-25)
	SEXT	HL
	LD	L,(IX+-25)
	LD	A,54
	CALL	__imul_b
	LD	BC,_Ship+15
	ADD	HL,BC
	LD	IY,HL
	PEA	IY+21
	CALL	_health_DamageModule
	POP	BC
	POP	BC
;  120	        }
L_72:
;  121	        if(key == sk_Down) {
	LD	A,(IX+-6)
	CP	A,1
	JR	NZ,L_86
;  122	            char i;
;  123	            switch(screen){
	LD	BC,(IX+-2)
	CALL	__stoiu
	CALL	__case8
L__26:
	DW	2
	DB	1
	DW24	L_59	

	DB	3
	DW24	L_67	

	DW24	L_86	

;  124	                case 1:
L_59:
;  125	                    for(i = select.tactical + 1; i < (TACT_MAX - 1); i++){
	LD	A,(_select+3)
	INC	A
	LD	(IX+-10),A
	JR	L_65
L_63:
;  126	                        int type = Ship.tactical[i].techtype;
	LD	A,(IX+-10)
	SEXT	HL
	LD	L,(IX+-10)
	LD	A,54
	CALL	__imul_b
	LD	BC,_Ship+339
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	LD	(IX+-31),HL
;  127	                        if( type == SHIELD || type == ARMOR ){
	OR	A,A
	LD	BC,6
	SBC	HL,BC
	JR	Z,L_62
	LD	BC,7
	LD	HL,(IX+-31)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_64
L_62:
;  128	                            select.tactical = i;
	LD	A,(IX+-10)
	SEXT	HL
	LD	L,(IX+-10)
	LD	(_select+3),HL
;  129	                            break;
	JR	L_86
;  130	                        }
;  131	                    }
L_64:
	INC	(IX+-10)
L_65:
	LD	A,(IX+-10)
	CP	A,5
	CALL	__setflag
	JP	M,L_63
;  132	                    break;
	JR	L_86
;  133	                case 3:
L_67:
;  134	                    if(select.mains < (SYS_MAX - 1)) select.mains++;
	LD	BC,5
	LD	HL,(_select)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_86
	LD	BC,(_select)
	INC	BC
	LD	(_select),BC
;  135	                    break;
;  136	            }
;  137	        }
L_86:
;  138	        if(key == sk_Up){
	LD	A,(IX+-6)
	CP	A,4
	JR	NZ,L_88
;  139	            char i;
;  140	            switch(screen){
	LD	BC,(IX+-2)
	CALL	__stoiu
	CALL	__case8
L__32:
	DW	2
	DB	1
	DW24	L_73	

	DB	3
	DW24	L_81	

	DW24	L_88	

;  141	                case 1:
L_73:
;  142	                    for(i = select.tactical - 1; i >= 0; i--){
	LD	A,(_select+3)
	DEC	A
	LD	(IX+-11),A
	JR	L_79
L_77:
;  143	                        int type = Ship.tactical[i].techtype;
	LD	A,(IX+-11)
	SEXT	HL
	LD	L,(IX+-11)
	LD	A,54
	CALL	__imul_b
	LD	BC,_Ship+339
	ADD	HL,BC
	LD	IY,HL
	LD	A,(IY+3)
	UEXT	HL
	LD	L,A
	LD	(IX+-37),HL
;  144	                        if( type == SHIELD || type == ARMOR ){
	OR	A,A
	LD	BC,6
	SBC	HL,BC
	JR	Z,L_76
	LD	BC,7
	LD	HL,(IX+-37)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_78
L_76:
;  145	                            select.tactical = i;
	LD	A,(IX+-11)
	SEXT	HL
	LD	L,(IX+-11)
	LD	(_select+3),HL
;  146	                            break;
	JR	L_88
;  147	                        }
;  148	                    }
L_78:
	DEC	(IX+-11)
L_79:
	LD	A,(IX+-11)
	OR	A,A
	JP	P,L_77
;  149	                    break;
	JR	L_88
;  150	                case 3:
L_81:
;  151	                    if(select.mains > 0) select.mains--;
	LD	BC,(_select)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	NC,L_88
	LD	IY,(_select)
	LEA	BC,IY+-1
	LD	(_select),BC
;  152	                    break;
;  153	            }
;  154	        }
;  155	            
;  156	    } while(loopgame == true);
L_88:
	LD	A,(IX+-20)
	CP	A,1
	JR	Z,L_87
;  157	    free(gfx_sprites);
	LD	BC,(IX+-24)
	PUSH	BC
	CALL	_free
	POP	BC
;  158	    gfx_End();
	CALL	_gfx_End
;  159	    int_Enable();
ei
;  160	    pgrm_CleanUp();
;  161	    return;
;  162	}
L_91:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_free                               IMPORT  -----   function
;_health_DamageModule                IMPORT  -----   function
;_health_GetHealthPercent            IMPORT  -----   function
;_random                             IMPORT  -----   function
;_select                             STATIC      6   variable
;_Screen_RenderUI                    IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_module_SetPowerMax                 IMPORT  -----   function
;_Ship                               STATIC    717   variable
;_module_SetHealthMax                IMPORT  -----   function
;_gfx_SetTextBGColor                 IMPORT  -----   function
;_gfx_SetTextTransparentColor        IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_SetDefaultPalette              IMPORT  -----   function
;_gfx_InitModuleIcons                IMPORT  -----   function
;_trekgui_init                       IMPORT  -----   function
;_ti_GetDataPtr                      IMPORT  -----   function
;_zx7_Decompress                     IMPORT  -----   function
;_ti_Open                            IMPORT  -----   function
;_ti_CloseAll                        IMPORT  -----   function
;_srandom                            IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_malloc                             IMPORT  -----   function
;G_2                                  IX-55      3   variable
;health                               IX-52      3   variable
;temp16                               IX-49      3   variable
;temp40                               IX-46      3   variable
;temp34                               IX-43      3   variable
;temp28                               IX-40      3   variable
;type                                 IX-37      3   variable
;temp22                               IX-34      3   variable
;type                                 IX-31      3   variable
;drv                                  IX-28      3   variable
;modnum                               IX-25      1   variable
;gfx_sprites                          IX-24      3   variable
;appvar                               IX-21      1   variable
;loopgame                             IX-20      1   variable
;G_0                                  IX-19      3   variable
;shield                               IX-16      3   variable
;i                                    IX-13      1   variable
;randnum                              IX-12      1   variable
;i                                    IX-11      1   variable
;i                                    IX-10      1   variable
;G_1                                   IX-9      3   variable
;key                                   IX-6      1   variable
;i                                     IX-5      3   variable
;screen                                IX-2      2   variable


; Stack Frame Size: 82 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__1:
	DB	"r"
	DB	0
L__2:
	DB	"trekgui"
	DB	0
	XREF _gfx_InitModuleIcons:ROM
	XREF _trekgui_init:ROM
	XREF _Screen_RenderUI:ROM
	XREF _module_SetPowerMax:ROM
	XREF _module_SetHealthMax:ROM
	XREF _health_DamageModule:ROM
	XREF _health_GetHealthPercent:ROM
	XREF _zx7_Decompress:ROM
	XREF _gfx_SetTextTransparentColor:ROM
	XREF _gfx_SetTextBGColor:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_SetDefaultPalette:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _ti_GetDataPtr:ROM
	XREF _ti_Open:ROM
	XREF _ti_CloseAll:ROM
	XREF _free:ROM
	XREF _malloc:ROM
	XREF _os_GetCSC:ROM
	XREF _srandom:ROM
	XREF _random:ROM
	XREF __idivs:ROM
	XREF __imuls:ROM
	XREF __ineg:ROM
	XREF __sor:ROM
	XREF __iremu:ROM
	XREF __sxor:ROM
	XREF __stoiu:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __imul_b:ROM
	XDEF _main
	XDEF _select
	XDEF _Ship
	END
